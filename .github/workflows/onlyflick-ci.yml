name: OnlyFlick CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  DOCKER_REGISTRY: docker.io
  GO_VERSION: '1.21'
  FLUTTER_VERSION: '3.16.0'
  KUBECTL_VERSION: 'v1.28.0'

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      k8s: ${{ steps.filter.outputs.k8s }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'api/**'
              - 'cmd/**'
              - 'internal/**'
              - 'pkg/**'
              - 'go.{mod,sum}'
              - 'Dockerfile'
              - '.dockerignore'
            frontend:
              - 'frontend/**'
            k8s:
              - 'k8s/**'
              - 'deployments/**'

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run backend tests
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
        run: go test -v ./...

      - name: Run linter
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Install dependencies
        working-directory: frontend/onlyflick-app
        run: |
          flutter clean
          flutter pub get

      - name: Run frontend tests
        working-directory: frontend/onlyflick-app
        run: flutter test

      - name: Analyze Flutter code
        working-directory: frontend/onlyflick-app
        run: flutter analyze

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [detect-changes, test-backend]
    if: |
      always() &&
      needs.detect-changes.outputs.backend == 'true' &&
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped')

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/onlyflick-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [detect-changes, test-frontend]
    if: |
      always() &&
      needs.detect-changes.outputs.frontend == 'true' &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped')

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Build Flutter web
        working-directory: frontend/onlyflick-app
        run: |
          flutter clean
          flutter pub get
          flutter build web --release

      - name: Create Dockerfile
        working-directory: frontend/onlyflick-app
        run: |
          cat > Dockerfile << 'EOF'
          FROM nginx:alpine
          COPY build/web /usr/share/nginx/html
          RUN echo 'server { listen 80; root /usr/share/nginx/html; index index.html; location / { try_files $uri $uri/ /index.html; } }' > /etc/nginx/conf.d/default.conf
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/onlyflick-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: frontend/onlyflick-app
          file: frontend/onlyflick-app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [detect-changes, build-backend, build-frontend]
    if: |
      always() &&
      github.event_name == 'push' &&
      (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') &&
      (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped')

    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Configure Kubernetes access
        if: ${{ secrets.KUBE_CONFIG != '' }}
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Verify cluster connectivity
        if: ${{ secrets.KUBE_CONFIG != '' }}
        run: |
          kubectl version --client
          kubectl cluster-info

      - name: Deploy to Kubernetes
        if: ${{ secrets.KUBE_CONFIG != '' }}
        env:
          NAMESPACE: ${{ github.ref_name == 'main' && 'onlyflick-prod' || 'onlyflick-staging' }}
          ENVIRONMENT: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
        run: |
          echo "🚀 Deploying to $ENVIRONMENT environment (namespace: $NAMESPACE)"
          
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic onlyflick-backend-secret \
            --from-literal=SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --from-literal=IMAGEKIT_PRIVATE_KEY="${{ secrets.IMAGEKIT_PRIVATE_KEY }}" \
            --from-literal=IMAGEKIT_PUBLIC_KEY="${{ secrets.IMAGEKIT_PUBLIC_KEY }}" \
            --from-literal=IMAGEKIT_URL_ENDPOINT="${{ secrets.IMAGEKIT_URL_ENDPOINT }}" \
            -n $NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -
          
          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
            BACKEND_IMAGE="${{ secrets.DOCKER_USERNAME }}/onlyflick-backend:${{ github.ref_name }}-${{ github.sha }}"
            echo "Updating backend image to: $BACKEND_IMAGE"
            sed -i "s|image: .*onlyflick-backend.*|image: $BACKEND_IMAGE|g" k8s/backend/*.yaml
          fi
          
          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
            FRONTEND_IMAGE="${{ secrets.DOCKER_USERNAME }}/onlyflick-frontend:${{ github.ref_name }}-${{ github.sha }}"
            echo "Updating frontend image to: $FRONTEND_IMAGE"
            sed -i "s|image: .*onlyflick-frontend.*|image: $FRONTEND_IMAGE|g" k8s/frontend/*.yaml
          fi
          
          kubectl apply -f k8s/backend/ -n $NAMESPACE
          kubectl apply -f k8s/frontend/ -n $NAMESPACE
          kubectl apply -f k8s/ingress/ -n $NAMESPACE
          
          kubectl rollout status deployment/onlyflick-backend -n $NAMESPACE --timeout=300s
          kubectl rollout status deployment/onlyflick-frontend -n $NAMESPACE --timeout=300s
          
          echo "✅ Deployment completed successfully!"

      - name: Simulate deployment (no cluster)
        if: ${{ secrets.KUBE_CONFIG == '' }}
        env:
          NAMESPACE: ${{ github.ref_name == 'main' && 'onlyflick-prod' || 'onlyflick-staging' }}
          ENVIRONMENT: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
        run: |
          echo "🚀 Simulating deployment to $ENVIRONMENT environment (namespace: $NAMESPACE)"
          echo "⚠️  No KUBE_CONFIG secret found - running in simulation mode"
          
          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
            echo "✅ Backend image built: ${{ secrets.DOCKER_USERNAME }}/onlyflick-backend:${{ github.ref_name }}-${{ github.sha }}"
          fi
          
          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
            echo "✅ Frontend image built: ${{ secrets.DOCKER_USERNAME }}/onlyflick-frontend:${{ github.ref_name }}-${{ github.sha }}"
          fi
          
          echo ""
          echo "📋 Deployment steps that would be executed:"
          echo "  1. Create namespace: $NAMESPACE"
          echo "  2. Create/update secrets from GitHub secrets"
          echo "  3. Apply backend manifests to k8s/backend/"
          echo "  4. Apply frontend manifests to k8s/frontend/"
          echo "  5. Apply ingress manifests to k8s/ingress/"
          echo "  6. Wait for rollout completion"
          echo ""
          echo "🔧 To enable real deployment, add KUBE_CONFIG secret to repository"

      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Image |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
            echo "| Backend   | ✅ Built | \`${{ needs.build-backend.outputs.image-tag }}\` |" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
            echo "| Frontend  | ✅ Built | \`${{ needs.build-frontend.outputs.image-tag }}\` |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.ref_name == 'main' && 'production' || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Namespace:** ${{ github.ref_name == 'main' && 'onlyflick-prod' || 'onlyflick-staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ secrets.KUBE_CONFIG }}" == "" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Note:** Deployment simulated (no KUBE_CONFIG secret)" >> $GITHUB_STEP_SUMMARY
            echo "To enable real deployment, configure KUBE_CONFIG secret in repository settings." >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Real deployment executed successfully!**" >> $GITHUB_STEP_SUMMARY
          fi
