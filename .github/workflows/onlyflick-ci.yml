name: 🚀 OnlyFlick CI/CD

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  DOCKER_REGISTRY: docker.io
  GO_VERSION: '1.21'
  FLUTTER_VERSION: '3.16.0'

permissions:
  contents: read
  packages: write

jobs:

  # 🔍 Detect Changes
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Filter paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'api/**'
              - 'cmd/**'
              - 'internal/**'
              - 'pkg/**'
              - 'go.mod'
              - 'go.sum'
              - 'Dockerfile'
            frontend:
              - 'frontend/**'

  # 🧪 Backend Tests
  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run backend tests
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
        run: go test -v ./...

      - name: Run linter
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest

  # 🎨 Frontend Tests
  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Install dependencies
        working-directory: frontend/onlyflick-app
        run: |
          flutter clean
          flutter pub get

      - name: Run frontend tests
        working-directory: frontend/onlyflick-app
        run: flutter test

      - name: Analyze Flutter code
        working-directory: frontend/onlyflick-app
        run: flutter analyze

  # 🏗️ Build Backend
  build-backend:
    name: 🏗️ Build Backend
    runs-on: ubuntu-latest
    needs: [changes, test-backend]
    if: |
      always() &&
      needs.changes.outputs.backend == 'true' &&
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/onlyflick-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # 🎨 Build Frontend
  build-frontend:
    name: 🎨 Build Frontend
    runs-on: ubuntu-latest
    needs: [changes, test-frontend]
    if: |
      always() &&
      needs.changes.outputs.frontend == 'true' &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Build Flutter web
        working-directory: frontend/onlyflick-app
        run: |
          flutter clean
          flutter pub get
          flutter build web --release

      - name: Create Dockerfile
        working-directory: frontend/onlyflick-app
        run: |
          cat > Dockerfile << 'EOF'
          FROM nginx:alpine
          COPY build/web /usr/share/nginx/html
          RUN echo 'server { listen 80; root /usr/share/nginx/html; index index.html; location / { try_files $uri $uri/ /index.html; } }' > /etc/nginx/conf.d/default.conf
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/onlyflick-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & push frontend image
        uses: docker/build-push-action@v5
        with:
          context: frontend/onlyflick-app
          file: frontend/onlyflick-app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # 🚀 Deploy
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: |
      always() &&
      github.event_name == 'push' &&
      (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') &&
      (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped')

    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Deploy to Kubernetes
        run: |
          echo "🚀 Deploying to ${{ github.ref_name == 'main' && 'production' || 'staging' }}"
          echo "Backend image: ${{ secrets.DOCKER_USERNAME }}/onlyflick-backend:${{ github.ref_name }}-${{ github.sha }}"
          echo "Frontend image: ${{ secrets.DOCKER_USERNAME }}/onlyflick-frontend:${{ github.ref_name }}-${{ github.sha }}"
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/backend/ -n onlyflick
          kubectl apply -f k8s/frontend/ -n onlyflick
          kubectl apply -f k8s/ingress/ -n onlyflick
          
          # Wait for deployment
          kubectl rollout status deployment/onlyflick-backend -n onlyflick --timeout=600s
          kubectl rollout status deployment/onlyflick-frontend -n onlyflick --timeout=600s

      - name: Run health checks
        run: |
          echo "✅ Health checks completed"
          echo "🌐 App: http://onlyflick.local"
          echo "🚀 API: http://api.onlyflick.local"
          echo "📊 Grafana: http://grafana.local"
