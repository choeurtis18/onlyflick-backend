// internal/domain/search.go

package domain

import "time"

// TagCategory repr√©sente les cat√©gories de tags disponibles
type TagCategory string

const (
	TagArt       TagCategory = "art"       // üé® Peinture, sculpture, street art
	TagMusic     TagCategory = "music"     // üéµ Concerts, instruments, compositions  
	TagSport     TagCategory = "sport"     // ‚öΩ Fitness, comp√©titions, aventure
	TagCinema    TagCategory = "cinema"    // üé¨ Films, s√©ries, critiques
	TagTech      TagCategory = "tech"      // üíª Gadgets, innovations, dev
	TagFashion   TagCategory = "fashion"   // üëó Style, tendances, looks
	TagFood      TagCategory = "food"      // üç≥ Recettes, restaurants, cuisine
	TagTravel    TagCategory = "travel"    // ‚úàÔ∏è Destinations, culture, aventure
	TagGaming    TagCategory = "gaming"    // üéÆ Jeux, esport, streaming
	TagLifestyle TagCategory = "lifestyle" // üèóÔ∏è D√©co, architecture, bien-√™tre
)

// SortType repr√©sente les diff√©rents types de tri pour les posts
type SortType string

const (
	SortRelevance     SortType = "relevance"      // Algorithme bas√© sur l'historique utilisateur
	SortPopular24h    SortType = "popular_24h"    // Posts populaires derni√®res 24h
	SortPopularWeek   SortType = "popular_week"   // Posts populaires cette semaine
	SortPopularMonth  SortType = "popular_month"  // Posts populaires ce mois
	SortRecent        SortType = "recent"         // Posts r√©cents par ordre chronologique
)

// InteractionType repr√©sente le type d'interaction
type InteractionType string

const (
	InteractionView        InteractionType = "view"         // Vue d'un post
	InteractionLike        InteractionType = "like"         // Like d'un post
	InteractionComment     InteractionType = "comment"      // Commentaire sur un post
	InteractionShare       InteractionType = "share"        // Partage d'un post
	InteractionProfileView InteractionType = "profile_view" // Vue d'un profil
	InteractionSearch      InteractionType = "search"       // Recherche d'un terme
	InteractionTagClick    InteractionType = "tag_click"    // Clic sur un tag
)

// UserSearchResult repr√©sente un utilisateur dans les r√©sultats de recherche
type UserSearchResult struct {
	ID               int64  `json:"id"`
	Username         string `json:"username"`
	FirstName        string `json:"first_name"`
	LastName         string `json:"last_name"`
	FullName         string `json:"full_name"`         // Nom complet calcul√©
	AvatarURL        string `json:"avatar_url"`
	Bio              string `json:"bio"`
	Role             string `json:"role"`              // "subscriber", "creator", "admin"
	IsCreator        bool   `json:"is_creator"`        // true si role = "creator"
	FollowersCount   int64  `json:"followers_count"`
	PostsCount       int64  `json:"posts_count"`
	IsFollowing      bool   `json:"is_following"`      // Si l'utilisateur actuel suit cette personne
	MutualFollowers  int64  `json:"mutual_followers"`  // Nombre d'amis en commun
}

// SearchResult repr√©sente le r√©sultat d'une recherche
type SearchResult struct {
	Posts   []PostWithDetails  `json:"posts"`
	Users   []UserSearchResult `json:"users"`
	Total   int                `json:"total"`
	HasMore bool               `json:"has_more"`
}

// PostWithDetails repr√©sente un post avec ses d√©tails √©tendus pour la recherche
type PostWithDetails struct {
	ID              int64            `json:"id"`
	UserID          int64            `json:"user_id"`
	Title           string           `json:"title"`
	Description     string           `json:"description"`
	MediaURL        string           `json:"media_url"`
	FileID          string           `json:"file_id"`
	Visibility      string           `json:"visibility"`
	CreatedAt       time.Time        `json:"created_at"`
	UpdatedAt       time.Time        `json:"updated_at"`
	Author          UserSearchResult `json:"author"`           // Auteur du post
	Tags            []TagCategory    `json:"tags"`             // Tags associ√©s
	LikesCount      int64            `json:"likes_count"`      // Nombre de likes
	CommentsCount   int64            `json:"comments_count"`   // Nombre de commentaires
	ViewsCount      int64            `json:"views_count"`      // Nombre de vues
	IsLiked         bool             `json:"is_liked"`         // Si l'utilisateur actuel a lik√©
	PopularityScore float64          `json:"popularity_score"` // Score de popularit√© calcul√©
	RelevanceScore  float64          `json:"relevance_score"`  // Score de pertinence pour l'utilisateur
}

// SearchRequest repr√©sente une requ√™te de recherche
type SearchRequest struct {
	Query        string        `json:"query"`         // Terme de recherche
	UserID       int64         `json:"user_id"`       // ID de l'utilisateur qui recherche
	Tags         []TagCategory `json:"tags"`          // Filtres par tags
	SortBy       SortType      `json:"sort_by"`       // Type de tri
	Limit        int           `json:"limit"`         // Nombre de r√©sultats max
	Offset       int           `json:"offset"`        // Pagination
	SearchType   string        `json:"search_type"`   // "posts", "users", "discovery"
}

// DiscoveryRequest repr√©sente une requ√™te pour le feed de d√©couverte
type DiscoveryRequest struct {
	UserID int64         `json:"user_id"`
	Tags   []TagCategory `json:"tags"`     // Filtres optionnels par tags
	SortBy SortType      `json:"sort_by"`  // Type de tri
	Limit  int           `json:"limit"`
	Offset int           `json:"offset"`
}

// PostTag repr√©sente un tag associ√© √† un post
type PostTag struct {
	ID        int64       `json:"id"`
	PostID    int64       `json:"post_id"`
	Category  TagCategory `json:"category"`
	CreatedAt time.Time   `json:"created_at"`
}

// UserInteraction repr√©sente une interaction utilisateur pour l'algorithme de recommandation
type UserInteraction struct {
	ID              int64           `json:"id"`
	UserID          int64           `json:"user_id"`
	InteractionType InteractionType `json:"interaction_type"`
	ContentType     string          `json:"content_type"`    // "post", "user", "tag"
	ContentID       int64           `json:"content_id"`      // ID du post, user ou tag
	ContentMeta     string          `json:"content_meta"`    // M√©tadonn√©es suppl√©mentaires (ex: tag category)
	Score           float64         `json:"score"`           // Score d'interaction (1.0=like, 2.0=comment, 0.5=view)
	CreatedAt       time.Time       `json:"created_at"`
}

// PostMetrics repr√©sente les m√©triques d'un post pour le calcul de popularit√©
type PostMetrics struct {
	PostID          int64     `json:"post_id"`
	ViewsCount      int64     `json:"views_count"`
	LikesCount      int64     `json:"likes_count"`
	CommentsCount   int64     `json:"comments_count"`
	SharesCount     int64     `json:"shares_count"`
	PopularityScore float64   `json:"popularity_score"`
	TrendingScore   float64   `json:"trending_score"`     // Score de tendance (pic r√©cent d'activit√©)
	LastUpdated     time.Time `json:"last_updated"`
}

// UserPreferences repr√©sente les pr√©f√©rences calcul√©es d'un utilisateur
type UserPreferences struct {
	UserID             int64                    `json:"user_id"`
	PreferredTags      map[TagCategory]float64  `json:"preferred_tags"`        // Score par cat√©gorie de tag
	PreferredCreators  []int64                  `json:"preferred_creators"`    // IDs des cr√©ateurs pr√©f√©r√©s
	InteractionHistory []UserInteraction        `json:"interaction_history"`   // Historique des interactions r√©centes
	LastUpdated        time.Time                `json:"last_updated"`
}

// TrendingTag repr√©sente un tag en tendance
type TrendingTag struct {
	Category      TagCategory `json:"category"`
	PostsCount    int64       `json:"posts_count"`      // Nombre de posts avec ce tag r√©cemment
	GrowthRate    float64     `json:"growth_rate"`      // Taux de croissance sur la p√©riode
	TrendingScore float64     `json:"trending_score"`   // Score de tendance calcul√©
	Period        string      `json:"period"`           // "24h", "week", "month"
}

// ===== CONSTRUCTEURS =====

// NewPostTag cr√©e un nouveau tag pour un post
func NewPostTag(postID int64, category TagCategory) *PostTag {
	return &PostTag{
		PostID:    postID,
		Category:  category,
		CreatedAt: time.Now(),
	}
}

// NewUserInteraction cr√©e une nouvelle interaction utilisateur
func NewUserInteraction(userID int64, interactionType InteractionType, contentType string, contentID int64, contentMeta string, score float64) *UserInteraction {
	return &UserInteraction{
		UserID:          userID,
		InteractionType: interactionType,
		ContentType:     contentType,
		ContentID:       contentID,
		ContentMeta:     contentMeta,
		Score:           score,
		CreatedAt:       time.Now(),
	}
}

// NewPostMetrics cr√©e de nouvelles m√©triques pour un post
func NewPostMetrics(postID int64) *PostMetrics {
	return &PostMetrics{
		PostID:      postID,
		LastUpdated: time.Now(),
	}
}

// ===== M√âTHODES UTILITAIRES POUR LES TAGS =====

// GetTagDisplayName retourne le nom d'affichage d'un tag
func (tc TagCategory) GetTagDisplayName() string {
	switch tc {
	case TagArt:
		return "Art"
	case TagMusic:
		return "Musique"
	case TagSport:
		return "Sport"
	case TagCinema:
		return "Cin√©ma"
	case TagTech:
		return "Tech"
	case TagFashion:
		return "Mode"
	case TagFood:
		return "Cuisine"
	case TagTravel:
		return "Voyage"
	case TagGaming:
		return "Gaming"
	case TagLifestyle:
		return "Lifestyle"
	default:
		return string(tc)
	}
}

// GetTagEmoji retourne l'emoji associ√© √† un tag
func (tc TagCategory) GetTagEmoji() string {
	switch tc {
	case TagArt:
		return "üé®"
	case TagMusic:
		return "üéµ"
	case TagSport:
		return "‚öΩ"
	case TagCinema:
		return "üé¨"
	case TagTech:
		return "üíª"
	case TagFashion:
		return "üëó"
	case TagFood:
		return "üç≥"
	case TagTravel:
		return "‚úàÔ∏è"
	case TagGaming:
		return "üéÆ"
	case TagLifestyle:
		return "üèóÔ∏è"
	default:
		return "üè∑Ô∏è"
	}
}

// ===== M√âTHODES UTILITAIRES POUR LES M√âTRIQUES =====

// CalculatePopularityScore calcule le score de popularit√© d'un post
func (pm *PostMetrics) CalculatePopularityScore() {
	// Algorithme de scoring : pond√©ration des diff√©rentes interactions
	likeWeight := 1.0
	commentWeight := 2.0
	shareWeight := 3.0
	viewWeight := 0.1
	
	pm.PopularityScore = float64(pm.LikesCount)*likeWeight +
		float64(pm.CommentsCount)*commentWeight +
		float64(pm.SharesCount)*shareWeight +
		float64(pm.ViewsCount)*viewWeight
}

// CalculateTrendingScore calcule le score de tendance bas√© sur l'activit√© r√©cente
func (pm *PostMetrics) CalculateTrendingScore(hoursAgo float64) {
	// Score de tendance bas√© sur la r√©cence des interactions
	timeFactor := 1.0 / (1.0 + hoursAgo/24.0) // D√©croissance sur 24h
	pm.TrendingScore = pm.PopularityScore * timeFactor
}

// ===== M√âTHODES UTILITAIRES POUR LES UTILISATEURS =====

// GetDisplayName retourne le nom d'affichage de l'utilisateur
func (usr *UserSearchResult) GetDisplayName() string {
	if usr.FullName != "" {
		return usr.FullName
	}
	if usr.FirstName != "" && usr.LastName != "" {
		return usr.FirstName + " " + usr.LastName
	}
	if usr.FirstName != "" {
		return usr.FirstName
	}
	return usr.Username
}