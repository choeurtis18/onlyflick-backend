package config

import (
	"log"
	"os"
	"path/filepath"

	"github.com/joho/godotenv"
)

// SecretKey contient la cl√© secr√®te de l'application charg√©e depuis les variables d'environnement.
var SecretKey string

// LoadEnv charge les variables d'environnement depuis un fichier .env et valide les variables requises.
func LoadEnv() {
	log.Println("[CONFIG] üîÑ Chargement des variables d'environnement depuis le fichier .env...")

	// R√©cup√®re le r√©pertoire de travail courant
	dir, err := os.Getwd()
	if err != nil {
		log.Fatalf("[CONFIG] ‚ùå Impossible de r√©cup√©rer le r√©pertoire de travail : %v", err)
	}

	// Construit le chemin vers le fichier .env
	envPath := filepath.Join(dir, ".env")

	// Charge le fichier .env (√©crase les variables existantes)
	if err := godotenv.Overload(envPath); err != nil {
		log.Printf("[CONFIG] ‚ö†Ô∏è  Fichier .env introuvable ou erreur de chargement : %s (%v)", envPath, err)
	} else {
		log.Printf("[CONFIG] ‚úÖ Fichier .env charg√© avec succ√®s : %s", envPath)
	}

	// V√©rifie que les variables d'environnement requises sont d√©finies
	SecretKey = os.Getenv("SECRET_KEY")
	if SecretKey == "" {
		log.Fatal("[CONFIG] ‚ùå La variable requise SECRET_KEY n'est pas d√©finie dans le .env")
	}
	if os.Getenv("DATABASE_URL") == "" {
		log.Fatal("[CONFIG] ‚ùå La variable requise DATABASE_URL n'est pas d√©finie dans le .env")
	}

	log.Println("[CONFIG] ‚úÖ Toutes les variables d'environnement requises sont d√©finies.")
}
